{{ 'gsap.min.js' | asset_url | script_tag }}
{{ 'ScrollTrigger.min.js' | asset_url | script_tag }}

<section class="sec-scroll">
  <div class="container">
    <div class="row">
      <div class="col-12">
        <div class="scroll-container">
          <div class="area-scroll-trigger">
            <div id="imageContainer" class="list-image-item">
              {% for block in section.blocks %}
                <img src="{{ block.settings.image | img_url: 'master' }}" alt="{{ block.settings.image.alt | escape }}">
              {% endfor %}
            </div>
            <div class="list-text-item" id="textContainer">
              {% for block in section.blocks %}
                {% if block.settings.text_animation != blank %}
                  <p class="{% if forloop.first %}show{% else %}hide{% endif %}">{{ block.settings.text_animation }}</p>
                {% endif %}
              {% endfor %}
            </div>
            <div class="progress-bar-item">
              <div class="progress-bar"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

{% javascript %}
document.addEventListener('DOMContentLoaded', function () {
  const images = document.querySelectorAll('#imageContainer img');
  images.forEach((img, index) => {
    img.style.display = index === 0 ? '' : 'none';
  });

  const texts = document.querySelectorAll('.list-text-item p');
  texts.forEach((text, index) => {
    if (text.textContent.trim() !== '') {
      text.classList.add(index === 0 ? 'show' : 'hide');
    } else {
      text.style.display = 'none'; // Sembunyikan paragraf kosong
    }
  });

  const progressBar = document.querySelector('.progress-bar');
  gsap.registerPlugin(ScrollTrigger);

  ScrollTrigger.create({
    trigger: '.scroll-container',
    start: 'top top',
    end: 'bottom bottom',
    scrub: true,
    onUpdate: (self) => {
      const scrollProgress = self.progress;
      const imageIndex = Math.min(Math.floor(scrollProgress * images.length), images.length - 1);
      images.forEach((img, index) => {
        img.style.display = index === imageIndex ? '' : 'none';
      });

      const nonEmptyTexts = Array.from(texts).filter(text => text.textContent.trim() !== ''); // Filter hanya teks yang tidak kosong
      let currentTextIndex = Math.floor(scrollProgress * nonEmptyTexts.length);
      currentTextIndex = Math.min(currentTextIndex, nonEmptyTexts.length - 1);

      nonEmptyTexts.forEach((text) => {
        text.classList.remove('show');
        text.classList.add('hide');
      });

      nonEmptyTexts[currentTextIndex].classList.add('show');
      nonEmptyTexts[currentTextIndex].classList.remove('hide');

      gsap.to(progressBar, {
        width: `${scrollProgress * 100}%`,
        duration: 0.1,
      });
    },
  });

  const areaScrollTrigger = document.querySelector('.area-scroll-trigger');
  const scrollContainer = document.querySelector('.scroll-container');
  ScrollTrigger.create({
    trigger: scrollContainer,
    start: 'top top',
    end: 'bottom bottom',
    onEnter: () => areaScrollTrigger.classList.add('object-stay'),
    onLeave: () => {
      areaScrollTrigger.classList.add('object-leave');
      areaScrollTrigger.classList.remove('object-stay');
    },
    onEnterBack: () => {
      areaScrollTrigger.classList.remove('object-leave');
      areaScrollTrigger.classList.add('object-stay');
    },
    onLeaveBack: () => areaScrollTrigger.classList.remove('object-stay'),
  });
});


{% endjavascript %}

{% schema %}
{
  "name": "Animation Product",
  "class": "section",
  "tag": "section",
  "settings": [],
  "blocks": [
    {
      "type": "image",
      "name": "Image Block",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.animation-product.blocks.image.settings.image.label"
        }
      ]
    },
    {
      "type": "text",
      "name": "Text Animation",
      "settings": [
        {
          "type": "text",
          "id": "text_animation",
          "label": "t:sections.animation-product.blocks.text.settings.text.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Animation Product"
    }
  ]
}
{% endschema %}
