{{ 'gsap.min.js' | asset_url | script_tag }}
{{ 'ScrollTrigger.min.js' | asset_url | script_tag }}

<section class="sec-scroll">
  <div class="container">
    <div class="row">
      <div class="col-12">
        <div class="scroll-container">
          <div class="area-scroll-trigger">
            <div id="imageContainer" class="list-image-item">
              {% for block in section.blocks %}
                <img src="{{ block.settings.image | img_url: 'master' }}" alt="{{ block.settings.image.alt | escape }}">
              {% endfor %}
            </div>
            <div class="list-text-item" id="textContainer">
              {% for block in section.blocks %}
                <p class="show">{{ block.settings.text_animation }}</p>
              {% endfor %}
            </div>
            <div class="progress-bar-item">
              <div class="progress-bar"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

{% javascript %}
 document.addEventListener("DOMContentLoaded", function () {
    const container = document.getElementById("imageContainer");
    // Mengambil semua gambar yang di-render oleh Shopify Liquid
    const images = container.querySelectorAll('img');
    // menetapkan jumlah variable ke javascript
  
    // Sembunyikan semua gambar kecuali yang pertama
    images.forEach((img, index) => {
      img.style.display = index === 0 ? '' : 'none'; // Tampilkan gambar pertama sebagai default
    });
  
    const texts = document.querySelectorAll(".list-text-item p");
    // Sembunyikan semua teks kecuali yang pertama
    gsap.set(texts, { autoAlpha: 0 });
    if (texts.length > 0) {
      gsap.to(texts[0], { autoAlpha: 1 }); // Tampilkan teks pertama
    }
  
    const progressBar = document.querySelector(".progress-bar");
    gsap.registerPlugin(ScrollTrigger);
  
    ScrollTrigger.create({
      trigger: ".scroll-container",
      start: "top top",
      end: "bottom bottom",
      scrub: true,
      onUpdate: (self) => {
        const scrollProgress = self.progress; // Nilai dari 0.0 hingga 1.0
        const imageIndex = Math.min(Math.floor(scrollProgress * images.length), images.length - 1);
  
        // Sembunyikan semua gambar dan tampilkan yang sesuai dengan scrollProgress
        images.forEach((img, index) => {
          img.style.display = index === imageIndex ? '' : 'none';
        });
  
        // Tentukan teks mana yang harus ditampilkan
        let currentTextIndex = Math.floor(scrollProgress * texts.length);
        currentTextIndex = currentTextIndex >= texts.length ? texts.length - 1 : currentTextIndex;
  
        gsap.to(texts, { autoAlpha: 0, duration: 0.1 }); // Sembunyikan semua teks
        gsap.to(texts[currentTextIndex], { autoAlpha: 1, duration: 0.1 }); // Tampilkan teks yang relevan
  
        // Memperbarui lebar progress bar
        gsap.to(progressBar, {
          width: `${scrollProgress * 100}%`,
          duration: 0.1,
        });
      },
    });
  
    const areaScrollTrigger = document.querySelector(".area-scroll-trigger");
    const scrollContainer = document.querySelector(".scroll-container");
  
    // ScrollTrigger untuk mengatur kelas object-stay dan object-leave
    ScrollTrigger.create({
      trigger: scrollContainer,
      start: "top top",
      end: "bottom bottom",
      onEnter: () => areaScrollTrigger.classList.add("object-stay"),
      onLeave: () => {
        areaScrollTrigger.classList.add("object-leave");
        areaScrollTrigger.classList.remove("object-stay");
      },
      onEnterBack: () => {
        areaScrollTrigger.classList.remove("object-leave");
        areaScrollTrigger.classList.add("object-stay");
      },
      onLeaveBack: () => areaScrollTrigger.classList.remove("object-stay"),
    });
  });
  
  {% endjavascript %}
  

{% schema %}
{
  "name": "Animation Product",
  "class": "section",
  "tag": "section",
  "settings": [],
  "blocks": [
    {
      "type": "image",
      "name": "Image Block",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.animation-product.blocks.image.settings.image.label"
        }
      ]
    },
    {
      "type": "text",
      "name": "Text Animation",
      "settings": [
        {
          "type": "text",
          "id": "text_animation",
          "label": "t:sections.animation-product.blocks.text.settings.text.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Animation Product"
    }
  ]
}
{% endschema %}
